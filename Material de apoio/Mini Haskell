Em C:
	Ex.1:
		C = 3;
		main(){
			X = 2*C + F(3,4);/* se a ordem fosse F(3,4) + 2*C, entao o resultado seria 15. Se a ordem fosse 2*C + F(3,4) o resultado     seria 13. O problema do efeito colateral é visto pela relevancia da ordem*/
			print(X);
		}

	Ex.2:
		Int  F(a,b){
			printf(...);// efeito colateral
			C = C + 1;
			return a+b;// efetio colateral
		}


Mini Haskell:
	- Funcional: Funcoes nao tem efeito colateral (pura) (unica responsabilidade é transformar os argumentos de entrada em um valor de saida. Nao tem nenhuma resposabilidade linear alem disso. Funcoes com retorno por endereco de memoria tem efieto colateral)
		-Tem a mesma semantica que funcoes na Mat.
			A -> F -> B
		-Transformar os args em um vetor
		- Nao alteram o Estado do programa (nao existe nocao de estado global do programa. Estado global sao variaveis globais )
		- A ordem com que avaliamos as expressoes nao é relevante (resultados sao mais previsiveis)

	-Expressoes do tipo  (levam a um valor):
		- Size l =
			if l == [] then O
			else 1 + size(tail l)


		

	Ex.3:
		Foo X=
			let y =x*x
			In y


Mini Haskell (features)
	- Expressoes com valores Bool, Int, List
	- Funcoes recursivas e de Alta-Ordem
	- Expressoes  
		-condicionais(if- then-else)
		-atribuicao (let)

Valor-> classe abstrata
Expressao-> interface
ValorConctro-> abstrato
Classe Lista (padrao composite-> valor monatario da prova)
	-Vazia ([])
	- Um valor V + uma lista
	[3] = (3,[])
	[3,4] = (3,[4]) = (3,(4,[]))